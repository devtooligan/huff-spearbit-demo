/*
  function collatzIteration(uint256 n) public pure override returns (uint256) {
    if (n % 2 == 0) {
      return n / 2;
    } else {
      return 3 * n + 1;
    }
  }
*/

#define macro MAIN() = takes (0) returns (0) {
    // skip routing, ignore fn sig, load arg directly
    0x04                             // [0x04]
    calldataload                     // [n]

    // check if n % 2 == 0
    0x02                             // [0x02, n]
    dup2                             // [n, 0x02, n]
    mod                              // [n % 2, n]
    iszero                           // [n % 2 == 0, n]

    // jump if even
    even                             // [0x11, n % 2 == 0, n]
    jumpi                            // [n]

    // logic for odd case:
    // note: multiply by 6 and add 2 (instead of x3 and + 1) so we can always div / 2 to skip a jump to save bytecode
    0x06                             // [0x06, n]
    mul                              // [6 * n, n]
    0x02                             // [0x02, 6 * n, n]
    add                              // [6 * n + 2, n]

    even:                            // [n]
      0x02                           // [0x02, n]
      swap1                          // [n, 0x02]
      div                            // [n / 2]

      returndatasize  // -> 0        // [0, n / 2]
      mstore                         // []
      0x20                           // [0x20]
      returndatasize  // -> 0        // [0x20, 0]
      return
}